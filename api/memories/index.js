// Production memories API with Supabase database integration
import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { randomUUID } from 'crypto';
import { eq, desc } from 'drizzle-orm';
import * as schema from '../../shared/schema.js';

// Initialize database connection
const databaseUrl = process.env.SUPABASE_DATABASE_URL;
if (!databaseUrl) {
  throw new Error("SUPABASE_DATABASE_URL must be set for production deployment");
}

const client = postgres(databaseUrl);
const db = drizzle(client);

export default async function handler(req, res) {
  console.log(`[MEMORIES API] ${req.method} /api/memories called`);
  console.log(`[MEMORIES API] Request body:`, req.body);
  console.log(`[MEMORIES API] Request headers:`, req.headers);

  // Add CORS headers
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,POST,PUT,DELETE');
  res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version');

  if (req.method === 'OPTIONS') {
    console.log(`[MEMORIES API] OPTIONS request handled`);
    res.status(200).end();
    return;
  }

  const userId = "shared-user";

  if (req.method === 'GET') {
    try {
      console.log(`[MEMORIES API] Fetching memories for user: ${userId}`);
      
      // Query memories from database
      const memories = await db.select().from(schema.memories)
        .where(eq(schema.memories.userId, userId))
        .orderBy(desc(schema.memories.createdAt));

      console.log(`[MEMORIES API] Found ${memories.length} memories`);
      res.json(memories);
    } catch (error) {
      console.error("Error fetching memories:", error);
      res.status(500).json({ error: "Failed to fetch memories" });
    }
  } else if (req.method === 'POST') {
    try {
      console.log(`[MEMORIES API] Creating memory:`, req.body);
      
      // Basic validation
      if (!req.body.title || !req.body.content) {
        return res.status(400).json({ error: "Title and content are required" });
      }

      // Create memory in database
      const [newMemory] = await db.insert(schema.memories).values({
        id: randomUUID(),
        title: req.body.title,
        content: req.body.content,
        type: req.body.type || 'note',
        tags: req.body.tags || [],
        userId: userId,
        source: req.body.source || null,
        summary: req.body.summary || null,
        priority: req.body.priority || null,
        status: req.body.status || null,
        linkedMemories: req.body.linkedMemories || null,
        embedding: [], // Will be generated by AI service
        createdAt: new Date(),
        updatedAt: new Date()
      }).returning();

      console.log(`[MEMORIES API] Memory created successfully:`, newMemory);
      res.status(201).json(newMemory);
    } catch (error) {
      console.error("Error creating memory:", error);
      res.status(500).json({ error: "Failed to create memory" });
    }
  } else if (req.method === 'PUT') {
    try {
      const { id } = req.query;
      console.log(`[MEMORIES API] Updating memory ${id}:`, req.body);
      
      const [updatedMemory] = await db.update(schema.memories)
        .set({
          ...req.body,
          updatedAt: new Date()
        })
        .where(eq(schema.memories.id, id))
        .returning();

      if (!updatedMemory) {
        return res.status(404).json({ error: "Memory not found" });
      }

      console.log(`[MEMORIES API] Memory updated successfully:`, updatedMemory);
      res.json(updatedMemory);
    } catch (error) {
      console.error("Error updating memory:", error);
      res.status(500).json({ error: "Failed to update memory" });
    }
  } else if (req.method === 'DELETE') {
    try {
      const { id } = req.query;
      console.log(`[MEMORIES API] Deleting memory ${id}`);
      
      const [deletedMemory] = await db.delete(schema.memories)
        .where(eq(schema.memories.id, id))
        .returning();

      if (!deletedMemory) {
        return res.status(404).json({ error: "Memory not found" });
      }

      console.log(`[MEMORIES API] Memory deleted successfully:`, deletedMemory);
      res.json({ 
        message: "Memory deleted successfully",
        id: id,
        success: true 
      });
    } catch (error) {
      console.error("Error deleting memory:", error);
      res.status(500).json({ error: "Failed to delete memory" });
    }
  } else {
    res.setHeader('Allow', ['GET', 'POST', 'PUT', 'DELETE']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}